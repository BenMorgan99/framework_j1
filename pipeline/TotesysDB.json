{
	"name": "TotesysDB",
	"properties": {
		"activities": [
			{
				"name": "Set _sourceSystem",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "sourceSystem",
					"value": {
						"value": "@pipeline().parameters.sourceSystem",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Lookup Entities",
				"description": "Lookup all entities associated with sourceSystem",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set _sourceSystem",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "--First create varaiable to store sourceEntityID:\nDECLARE @sourceEntityID INT;\n\n-- Save the sourceEntityID to variable:\nSELECT @sourceEntityID = sourceEntityID\nFROM sourceSystem\nWHERE sourceEntityName = '@{pipeline().parameters.sourceSystem}';\n\n--SELECT from sourceEntity\nSELECT * FROM sourceEntity\nWHERE @sourceEntityID = @sourceEntityID",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "MetaData_Dataset",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Ingestion",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup Notebooks",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup Entities').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "BRONZE",
							"description": "Activate bronze ingestion layer.",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@json(activity('Lookup Notebooks').output.firstRow.notebooks).bronze",
									"type": "Expression"
								},
								"baseParameters": {
									"entityName": {
										"value": "@string(item()['entityName'])",
										"type": "Expression"
									},
									"sourceSystem": {
										"value": "@string(pipeline().parameters.sourceSystem)",
										"type": "Expression"
									},
									"entityColumns": {
										"value": "@item()['entityColumns']",
										"type": "Expression"
									},
									"entitySourceQuery": {
										"value": "@item()['entitySourceQuery']",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Framework Databricks",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Update Bronze Location",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "BRONZE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat(\n   'UPDATE sourceEntity SET bronzeLocation = ''',\n   if(empty(activity('BRONZE').output.runOutput), 'None', activity('BRONZE').output.runOutput),\n   ''' WHERE entityName = ''',\n   item().entityName,\n   '''; SELECT * FROM sourceEntity WHERE bronzeLocation = ''',\n   if(empty(activity('BRONZE').output.runOutput), 'None', activity('BRONZE').output.runOutput),\n   ''' AND entityName = ''',\n   item().entityName,\n   ''';'\n)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "MetaData_Dataset",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "Transformation",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Ingestion",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@json(activity('Lookup Notebooks').output.firstRow.notebooks).silver",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "SILVER",
							"description": "Activate bronze ingestion layer.",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@if(equals(variables('sourceSystem'), 'TotesysDB'), '/Users/sjp@data-ai.uk/framework_j1/src/notebooks/SILVER_TotesysDB', '/Users/sjp@data-ai.uk/framework_j1/src/notebooks/SILVER')\n",
									"type": "Expression"
								},
								"baseParameters": {
									"entityName": {
										"value": "@string(item()['entityName'])",
										"type": "Expression"
									},
									"sourceSystem": {
										"value": "@string(pipeline().parameters.sourceSystem)",
										"type": "Expression"
									},
									"entityColumns": {
										"value": "@item()['entityColumns']",
										"type": "Expression"
									},
									"entitySourceQuery": {
										"value": "@item()['entitySourceQuery']",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Framework Databricks",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Update SILVER",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "SILVER",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat(\n   'UPDATE sourceEntity SET silverLocation = ''',\n   if(empty(activity('SILVER').output.runOutput), 'None', activity('SILVER').output.runOutput),\n   ''' WHERE entityName = ''',\n   item().entityName,\n   '''; SELECT * FROM sourceEntity WHERE silverLocation = ''',\n   if(empty(activity('SILVER').output.runOutput), 'None', activity('SILVER').output.runOutput),\n   ''' AND entityName = ''',\n   item().entityName,\n   ''';'\n)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "MetaData_Dataset",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "GOLD",
				"description": "Perform analytics on ingested data.",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "Transformation",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": {
						"value": "@json(activity('Lookup Notebooks').output.firstRow.notebooks).gold",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "Framework Databricks",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Lookup Notebooks",
				"description": "This activity will query the metadata database, to determine which notebooks to run.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Lookup Entities",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT notebooks\nFROM sourceSystem\nWHERE sourceEntityName = '@{pipeline().parameters.sourceSystem}'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sourceSystem_table",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"sourceSystem": {
				"type": "string"
			}
		},
		"variables": {
			"sourceSystem": {
				"type": "String"
			},
			"updateBronzeLocation": {
				"type": "String"
			}
		},
		"annotations": []
	}
}